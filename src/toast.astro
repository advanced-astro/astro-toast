---
export interface Props {
  close_after_ms?: number;
  type?: "error" | "warning" | "success" | "info";
  position?:
    | "top-start"
    | "top-center"
    | "top-end"
    | "middle-start"
    | "middle-center"
    | "middle-end"
    | "bottom-start"
    | "bottom-center"
    | "bottom-end";
}

const {
  type = "default",
  position = "bottom-end",
  close_after_ms = 3000,
} = Astro.props;
---

<div class={position} id="_astro-toast" vanish-delay={close_after_ms}>
  <div class={`alert ${type}`}>
    {
      type === "info" && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-info"
        >
          <path d="M12 16v-4" />
          <>
            <circle cx="12" cy="12" r="10" />
            <path d="M12 8h.01" />
          </>
        </svg>
      )
    }
    {
      type === "error" && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-x-circle"
        >
          <path d="m15 9-6 6" />
          <>
            <circle cx="12" cy="12" r="10" />
            <path d="m9 9 6 6" />
          </>
        </svg>
      )
    }
    {
      type === "success" && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-check-circle-2"
        >
          <>
            <circle cx="12" cy="12" r="10" />
            <path d="m9 12 2 2 4-4" />
          </>
        </svg>
      )
    }
    {
      type === "warning" && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-alert-triangle"
        >
          <path d="M12 9v4" />
          <>
            <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" />
            <path d="M12 17h.01" />
          </>
        </svg>
      )
    }
    <slot />
  </div>
</div>
<script>
  window.onload = () => {
    const toasts = document.querySelectorAll("#_astro-toast");

    toasts.forEach((toast) => {
      const delay = parseInt(
        toast.attributes.getNamedItem("vanish-delay")?.value || "3000"
      );

      setTimeout(() => {
        toast.classList.add("jump-out");
        return setTimeout(() => {
          toast.remove();
        }, 1000);
      }, delay);
    });
  };
</script>

<style>
  .alert {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 1rem 2rem;
    border-radius: 1rem;
    background-color: gray;
  }
  .error {
    background-color: red;
  }
  .success {
    background-color: lightgreen;
  }
  .warning {
    background-color: orange;
  }
  .info {
    background-color: skyblue;
  }
  .bottom-end {
    position: fixed;
    right: 0;
    bottom: 0;
    transform: translate(-1vw, -1vw);
    animation: 0.5s bottom-end;
  }
  .bottom-center {
    position: fixed;
    bottom: 0;
    transform: translate(calc(50vw - 50%), -1vw);
    animation: 0.5s bottom-center;
  }
  .bottom-start {
    position: fixed;
    left: 0;
    bottom: 0;
    transform: translate(1vw, -1vw);
    animation: 0.5s bottom-start;
  }

  .middle-start {
    position: fixed;
    left: 0;
    transform: translate(1vw, calc(50vh - 50%));
    animation: 0.5s middle-start;
  }

  .middle-center {
    position: fixed;
    transform: translate(calc(50vw - 50%), calc(50vh - 50%));
    animation: 0.5s middle-center;
  }

  .middle-end {
    position: fixed;
    right: 0;
    transform: translate(-1vw, calc(50vh - 50%));
    animation: 0.5s middle-end;
  }

  .top-end {
    position: fixed;
    top: 0;
    right: 0;
    transform: translate(-1vw, 1vw);
    animation: 0.5s top-end;
  }

  .top-center {
    position: fixed;
    top: 0;
    transform: translate(calc(50vw - 50%), 1vw);
    animation: 0.5s top-center;
  }

  .top-start {
    position: fixed;
    top: 0;
    left: 0;
    transform: translate(1vw, 1vw);
    animation: 0.5s top-start;
  }
  @keyframes bottom-end {
    0% {
      opacity: 0;
      transform: translateX(1vw);
    }
    100% {
      opacity: 1;
      transform: translate(-1vw, -1vw);
    }
  }

  @keyframes bottom-center {
    0% {
      opacity: 0;
      transform: translate(calc(50vw - 50%), 1vw);
    }
    100% {
      opacity: 1;
      transform: translate(calc(50vw - 50%), -1vw);
    }
  }

  @keyframes bottom-start {
    0% {
      opacity: 0;
      transform: translate(-1vw, 1vw);
    }
    100% {
      opacity: 1;
      transform: translate(1vw, -1vw);
    }
  }

  @keyframes middle-start {
    0% {
      opacity: 0;
      transform: translate(-1vw, calc(50vh - 50%));
    }
    100% {
      opacity: 1;
      transform: translate(1vw, calc(50vh - 50%));
    }
  }

  @keyframes middle-center {
    0% {
      opacity: 0;
      transform: translate(calc(50vw - 50%), calc(50vh - 50%));
    }
    100% {
      opacity: 1;
      transform: translate(calc(50vw - 50%), calc(50vh - 50%));
    }
  }

  @keyframes middle-end {
    0% {
      opacity: 0;
      transform: translate(1vw, calc(50vh - 50%));
    }
    100% {
      opacity: 1;
      transform: translate(-1vw, calc(50vh - 50%));
    }
  }

  @keyframes top-end {
    0% {
      opacity: 0;
      transform: translate(1vw, -1vw);
    }
    100% {
      opacity: 1;
      transform: translate(-1vw, 1vw);
    }
  }

  @keyframes top-center {
    0% {
      opacity: 0;
      transform: translate(calc(50vw - 50%), -1vw);
    }
    100% {
      opacity: 1;
      transform: translate(calc(50vw - 50%), 1vw);
    }
  }

  @keyframes top-start {
    0% {
      opacity: 0;
      transform: translate(-1vw, -1vw);
    }
    100% {
      opacity: 1;
      transform: translate(1vw, 1vw);
    }
  }
  .jump-out {
    animation: 0.5s jump-out;
    opacity: 0;
  }
  @keyframes jump-out {
    0% {
      opacity: 1;
    }
    80% {
      scale: 1.1;
      opacity: 1;
    }
    100% {
      scale: 0.5;
      opacity: 0;
    }
  }
</style>
