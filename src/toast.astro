---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import "../dist/output.css";

const createIcon = (name: string) => (
  <svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    {name === "info" && <path d="M12 16v-4" />}
    {name === "error" && <path d="m15 9-6 6" />}
    {name === "success" && <path d="m9 12 2 2 4-4" />}
    {name === "warning" && <path d="M12 9v4" />}
    <circle cx="12" cy="12" r="10" />
    {name !== "success" && <path d="M12 17h.01" />}
  </svg>
);

const alert = cva(
  "flex-row items-center gap-4 alert toast w-fit m-4 text-black animate-pop-in-out opacity-0",
  {
    variants: {
      variant: {
        default: "",
        info: "bg-blue-400",
        error: "bg-red-600",
        success: "bg-green-500",
        warning: "bg-orange-500",
      },
      where: {
        "top-start": "toast-top toast-start",
        "top-center": "toast-top toast-center",
        "top-end": "toast-top toast-end",
        "middle-start": "toast-middle toast-start",
        "middle-center": "toast-middle toast-center",
        "middle-end": "toast-middle toast-end",
        "bottom-start": "toast-bottom toast-start",
        "bottom-center": "toast-bottom toast-center",
        "bottom-end": "toast-bottom toast-end",
      },
    },
    compoundVariants: [{ variant: "default", where: "bottom-end" }],
  }
);

interface Props extends HTMLAttributes<"div">, VariantProps<typeof alert> {}

const { variant = "default", where = "bottom-end", ...props } = Astro.props;
---

<div class={alert({ variant, where })} {...props}>
  {createIcon(variant)}
  <slot />
</div>;
