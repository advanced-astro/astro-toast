---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import "../dist/output.css";

const alert = cva(
  "flex-row items-center gap-4 alert toast w-fit m-4 text-black animate-pop-in-out opacity-0",
  {
    variants: {
      variant: {
        default: "",
        info: "bg-blue-400",
        error: "bg-red-600",
        success: "bg-green-500",
        warning: "bg-orange-500",
      },
      where: {
        "top-start": "toast-top toast-start",
        "top-center": "toast-top toast-center",
        "top-end": "toast-top toast-end",
        "middle-start": "toast-middle toast-start",
        "middle-center": "toast-middle toast-center",
        "middle-end": "toast-middle toast-end",
        "bottom-start": "toast-bottom toast-start",
        "bottom-center": "toast-bottom toast-center",
        "bottom-end": "toast-bottom toast-end",
      },
    },
    compoundVariants: [{ variant: "default", where: "bottom-end" }],
  }
);

interface Props extends HTMLAttributes<"div">, VariantProps<typeof alert> {}

const { variant = "default", where = "bottom-end", ...props } = Astro.props;
---

<div class={alert({ variant, where })} {...props}>
  {
    variant === "info" && (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-info"
      >
        <path d="M12 16v-4" />
        <>
          <circle cx="12" cy="12" r="10" />
          <path d="M12 8h.01" />
        </>
      </svg>
    )
  }
  {
    variant === "error" && (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-x-circle"
      >
        <path d="m15 9-6 6" />
        <>
          <circle cx="12" cy="12" r="10" />
          <path d="m9 9 6 6" />
        </>
      </svg>
    )
  }
  {
    variant === "success" && (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-check-circle-2"
      >
        <>
          <circle cx="12" cy="12" r="10" />
          <path d="m9 12 2 2 4-4" />
        </>
      </svg>
    )
  }
  {
    variant === "warning" && (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-alert-triangle"
      >
        <path d="M12 9v4" />
        <>
          <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" />
          <path d="M12 17h.01" />
        </>
      </svg>
    )
  }
  <slot />
</div>
